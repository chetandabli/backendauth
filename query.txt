1. Create an index on the user_id field in the sales collection to improve the performance of your queries.

here i'm creating index on user_id in ascending order. i have given name for index but not required we can create without name. name will be automatically given then.

db.sales.createIndex({user_id: 1}, {name: "index for user_id"})

we can also find more info using this command

db.sales.find({user_id: 3}).explain()

2. Use the $lookup operator in an aggregation pipeline to join the vendors and sales collections, and return a new documents that contains the name and city of each vendor, along with their sales. The output should look like this:

here we have to combine two collections so i used lookup then we also have to remove some fields so i used project

db.vendors.aggregate([{$lookup: {from: "sales", localField: "_id", foreignField: "user_id", as: "sales"}},{$project: {age: 0, "sales.user_id": 0, "sales.selling_price": 0}}])

3. Use the $group operator in an aggregation pipeline to calculate the total number of sales and total profit for each user. The output should look like this:

db.vendors.aggregate([{$lookup: {from: "sales", localField: "_id", foreignField: "user_id", as: "sales"}}, {$unwind: "$sales"}, {$group: {_id: "$_id", name: {$first: "$name"}, total_profit: {$sum: "$sales.profit"}, total_sales: {$count: {}}}}])

4. Use the $sort operator to sort the output documents by total profit in decreasing order. The output should look like this:

db.vendors.aggregate([{$lookup: {from: "sales", localField: "_id", foreignField: "user_id", as: "sales"}}, {$unwind: "$sales"}, {$group: {_id: "$_id", name: {$first: "$name"}, total_profit: {$sum: "$sales.profit"}, total_sales: {$count: {}}}}, {$sort: {"total_profit": -1}}])

5. Cross check the total_sales and total_profit, if it is correct, by adding more sales in the sales collection and running your aggregation pipeline again.

checked working...



